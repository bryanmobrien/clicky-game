{"version":3,"sources":["components/img/index.js","App.js","serviceWorker.js","index.js"],"names":["Img","props","className","onClick","id","style","backgroundImage","img","App","useState","dataJSON","sort","Math","random","data","setDataState","score","setScoreState","leaderBoard","setLeaderState","status","setStatusState","cssClass","setClassState","handleClick","index","findIndex","x","name","isNotChosen","map","a","setTimeout","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qmCAaeA,MAVf,SAAaC,GACX,OACE,yBACEC,UAAU,MACVC,QAAS,kBAAMF,EAAME,QAAQF,EAAMG,KACnCC,MAAO,CAAEC,gBAAiB,OAASL,EAAMM,IAAM,Q,MC0CtCC,MA7Cf,WAAgB,IAAD,EACgBC,mBAC3BC,EAASC,MAAK,kBAAMC,KAAKC,SAAW,OAFzB,mBACNC,EADM,KACAC,EADA,OAIkBN,mBAAS,GAJ3B,mBAINO,EAJM,KAICC,EAJD,OAKyBR,mBAAS,GALlC,mBAKNS,EALM,KAKOC,EALP,OAMoBV,mBAAS,6BAN7B,mBAMNW,EANM,KAMEC,EANF,OAOqBZ,mBAAS,UAP9B,mBAONa,EAPM,KAOIC,EAPJ,KAQb,SAASC,EAAYpB,GACnBmB,EAAc,QACd,IAAME,EAAQX,EAAKY,WAAU,SAAAC,GAAC,OAAIA,EAAEC,OAASxB,KACzCU,EAAKW,GAAOI,aACdf,EAAKW,GAAOI,aAAc,EAC1BZ,EAAcD,EAAQ,GACtBK,EAAe,mBACfN,EAAaD,EAAKH,MAAK,kBAAMC,KAAKC,SAAW,OACzCG,GAASE,GAAaC,EAAeH,EAAQ,KAEjDC,EAAc,GACdI,EAAe,cACfP,EAAKgB,KAAI,SAAAC,GAAC,OAAKA,EAAEF,aAAc,KAC/Bd,EAAaD,EAAKH,MAAK,kBAAMC,KAAKC,SAAW,QAE/CmB,YAAW,WACTT,EAAc,YACb,GAEL,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,kDACA,sCACUc,EADV,iBAC+BE,EAD/B,cAGA,wBAAIhB,UAAWoB,GAAf,IAA2BF,IAE7B,yBAAKlB,UAAU,UACZY,EAAKgB,KAAI,SAACvB,EAAK0B,GAAN,OACR,kBAAC,EAAD,CAAKC,IAAKD,EAAG1B,IAAKA,EAAIA,IAAKH,GAAIG,EAAIqB,KAAMzB,QAASqB,UC/BxCW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4c997c9e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Img(props) {\n  return (\n    <div\n      className=\"img\"\n      onClick={() => props.onClick(props.id)}\n      style={{ backgroundImage: \"url(\" + props.img + \")\" }}\n    ></div>\n  );\n}\n\nexport default Img;\n","import React, { useState } from \"react\";\nimport dataJSON from \"./data.json\";\nimport Img from \"./components/img\";\nimport \"./App.css\";\n\nfunction App() {\n  const [data, setDataState] = useState(\n    dataJSON.sort(() => Math.random() - 0.5)\n  );\n  const [score, setScoreState] = useState(0);\n  const [leaderBoard, setLeaderState] = useState(0);\n  const [status, setStatusState] = useState(\"Click any button to play!\");\n  const [cssClass, setClassState] = useState(\"flashy\");\n  function handleClick(id) {\n    setClassState(\"Flop\");\n    const index = data.findIndex(x => x.name === id);\n    if (data[index].isNotChosen) {\n      data[index].isNotChosen = false;\n      setScoreState(score + 1);\n      setStatusState(\"Correct Answer!\");\n      setDataState(data.sort(() => Math.random() - 0.5));\n      if (score >= leaderBoard) setLeaderState(score + 1);\n    } else {\n      setScoreState(0);\n      setStatusState(\"Game Over!\");\n      data.map(a => (a.isNotChosen = true));\n      setDataState(data.sort(() => Math.random() - 0.5));\n    }\n    setTimeout(() => {\n      setClassState(\"flashy\");\n    }, 5);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Marvel Clicky Game</h1>\n        <h2>\n          Score: {score} | HighScore: {leaderBoard} - Status:\n        </h2>\n        <h2 className={cssClass}> {status}</h2>\n      </header>\n      <div className=\"imgDiv\">\n        {data.map((img, i) => (\n          <Img key={i} img={img.img} id={img.name} onClick={handleClick} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}